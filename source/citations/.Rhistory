View(spectrum_iden_previous_release)
cat("The number of identified spectrum in the Current Release  is: ", spectrum_iden_current_release[2,Spectrum.Number])
cat("The number of identified spectrum in the Current Release  is: ", spectrum_iden_current_release[2,"Spectrum.Number"])
cat("The number of identified spectrum in the Previous Release is: ", spectrum_iden_previous_release[2,"Spectrum.Number"])
cat("The number of identified spectrum in the Current Release  is: ", spectrum_iden_current_release[3,"Spectrum.Number"])
cat("The number of identified spectrum in the Previous Release is: ", spectrum_iden_previous_release[2,"Spectrum.Number"])
cat("The number of identified spectrum in the Current Release  is: ", spectrum_iden_current_release[4,"Spectrum.Number"])
cat("The number of identified spectrum in the Previous Release is: ", spectrum_iden_previous_release[2,"Spectrum.Number"])
cat("The number of identified spectrum in the Current Release  is: ", spectrum_iden_current_release[3,"Spectrum.Number"])
cat("The number of identified spectrum in the Previous Release is: ", spectrum_iden_previous_release[2,"Spectrum.Number"])
View(spectrum_iden_current_release)
#Here is the same than before examples.
spectrum_iden_current_release <- read.delim(paste(current_release_iden, "tables_spectrum_ide_table.txt", sep=""), header = TRUE)
spectrum_iden_previous_release <- read.delim(paste(previous_release, "tables_spectrum_ide_table.txt", sep = ""), header = TRUE)
#Here is the same than before examples.
spectrum_iden_current_release <- read.delim(paste(current_release_iden, "tables_spectrum_ide_table.txt", sep=""), header = TRUE)
spectrum_iden_previous_release <- read.delim(paste(previous_release, "tables_spectrum_ide_table.txt", sep = ""), header = TRUE)
#Here is the same than before examples.
spectrum_iden_current_release <- read.delim(paste(current_release_iden, "tables_spectrum_ide_table.txt", sep=""), header = TRUE)
spectrum_iden_previous_release <- read.delim(paste(previous_release, "tables_spectrum_ide_table.txt", sep = ""), header = TRUE)
#Here is the same than before examples.
spectrum_iden_current_release <- read.delim(paste(current_release_iden, "tables_spectrum_ide_table.txt", sep=""), header = TRUE)
spectrum_iden_previous_release <- read.delim(paste(previous_release, "tables_spectrum_ide_table.txt", sep = ""), header = TRUE)
# PRIDE Cluster clusters all MS/MS spectra submitted to PRIDE Archive repository release: 2015-04
# http://www.ebi.ac.uk/pride/cluster/
# Description:The present script provides a reliable QC (Quality control) report about MGF files generated.
# This script must be in the folder /nfs/nobackup/pride/cluster-prod/archive_spectra
# Upload packages
packages <- c( "ggplot2", "scales", "knitr", "markdown", "tidyr", "rmarkdown","gridExtra", "stringr","data.table", "dplyr", "reshape")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())), repos="http://cran.us.r-project.org")  }
library("ggplot2");
library("scales");
library("knitr");
library("markdown");
library("tidyr");
library("rmarkdown");
library("gridExtra"); library("stringr");
library("data.table"); library("dplyr");
library("reshape")
current_release_iden <- "/Users/yperez/cache/CurrentRelease_"
previous_release <- "/Users/yperez/cache/PreviousRelease_"
peptides_iden_current_release <- read.table(paste(current_release_iden, "ID_identify.txt", sep = ""), quote="\"", comment.char="")
peptides_iden_previous_release <- read.table(paste(previous_release, "ID_identify.txt", sep = ""), quote="\"", comment.char="")
cat("The number of identified peptides in the Current Release is:", nrow(peptides_iden_current_release))
#Print a frequency tables
table_current_release <- data.frame(Types = c("Identified"), Peptides= c(nrow(peptides_iden_current_release)) )
kable(table_current_release, padding = 0)
cat("The number of identified peptides in the Previous Release is:", nrow(peptides_iden_previous_release))
table_previous_release <- data.frame(Types = c("Identified"), Peptides= c(nrow(peptides_iden_previous_release)) )
kable(table_previous_release, padding = 0)
#Conditional
if (nrow(peptides_iden_current_release)>nrow(peptides_iden_previous_release)) {
cat("Number of identified peptides Increased (Current - Previous):", nrow(peptides_iden_current_release)-nrow(peptides_iden_previous_release),"\n")
} else if ((nrow(peptides_iden_current_release)<nrow(peptides_iden_previous_release))) {
cat("Number of identified Peptides Decreased (Previous - Current):", nrow(peptides_iden_previous_release)-nrow(peptides_iden_current_release),"\n")
} else
cat("The number of identified peptides are equal \n")
#if (nrow(peptides_unid_current_release)>nrow(peptides_unid_previous_release)) {
#    cat("Number of unidentified peptides reduced:", nrow(peptides_iden_current_release)-nrow(peptides_iden_previous_release),"\n")
#} else if ((nrow(peptides_unid_current_release)<nrow(peptides_unid_previous_release))) {
#    cat("Number of unidentified Peptides increased:", nrow(peptides_unid_previous_release)-nrow(peptides_unid_current_release),"\n")
#} else
#    cat("The number of unidentified peptides are equal \n")
#Create a data.frame with the data.
df_identified_peptides <- data.frame(Types = c("Current Release Identified", "Previous Release Identified"), Peptides= c(nrow(peptides_iden_current_release),nrow(peptides_iden_previous_release)) )
#df_unidentified_peptides <- data.frame(Types = c("current_release\nUnidentified", "previous_release\nUnidentified"), Peptides= c(nrow(peptides_unid_current_release),nrow(peptides_unid_previous_release)))
#Bar plot
a <- ggplot(df_identified_peptides, aes(x = Types, y = Peptides, fill=Types)) + geom_bar(stat = "identity") + theme(axis.text.x=element_blank(),axis.ticks.x=element_blank()) + scale_y_continuous(expand = c(0, 1000))
#b <- ggplot(df_unidentified_peptides, aes(x = Types, y = Peptides, fill=Types)) + geom_bar(stat = "identity") + theme(axis.text.x=element_blank(),axis.ticks.x=element_blank()) + scale_y_continuous(expand = c(0, 100))
#grid.arrange(a, b, ncol=2)
grid.arrange(a, ncol=2)
#This part create a modificatons table with the number of medifications en each release and a comparative plot
modifications_current_release <- read.delim(paste(current_release_iden, "tables_modifications_table.txt", sep = ""), header = FALSE)
modifications_previous_release <- read.delim(paste(previous_release, "tables_modifications_table.txt", sep = ""), header=FALSE)
colnames(modifications_current_release) <- c("Modifications", "Frequency")
colnames(modifications_previous_release) <- c("Modifications", "Frequency")
modifications_current_release_1 <- modifications_current_release[order(modifications_current_release$Modifications),]
modifications_previous_release_2 <- modifications_previous_release[order(modifications_previous_release$Modifications),]
modifications1 <- cbind(modifications_current_release[1:(nrow(modifications_current_release_1)/2),], modifications_current_release[((nrow(modifications_current_release_1)/2)+1):nrow(modifications_current_release_1),])
modifications2 <- cbind(modifications_previous_release[1:(nrow(modifications_previous_release_2)/2),], modifications_previous_release[((nrow(modifications_previous_release)/2)+1):nrow(modifications_previous_release),])
cat("There are",nrow(modifications_current_release), " different modifications")
cat("The number of modifications are:", sum(modifications_current_release$Frequency))
kable(modifications1, row.names = FALSE, padding = 0)
cat("There are",nrow(modifications_previous_release), " different modifications")
cat("The number of modifications are:", sum(modifications_previous_release$Frequency))
kable(modifications2, row.names = FALSE, padding = 0)
#Conditional
if (nrow(modifications_current_release)>nrow(modifications_previous_release)) {
cat("Number of modifications reduced in the new release:", nrow(modifications_current_release)-nrow(modifications_previous_release),"\n")
} else if ((nrow(modifications_current_release)<nrow(modifications_previous_release))) {
cat("Number of modifications increased in the new release:", nrow(modifications_previous_release)-nrow(modifications_current_release),"\n")
} else
cat("The number of identified peptides are equal \n")
#Create a df to make it easier
df <- modifications_current_release
df2 <- modifications_previous_release
#First convert your peptide counts to numeric (they're a factor with numeric character labels, that's a bit messed up):
df$Frequency=as.numeric(as.character(df$Frequency))
df2$Frequency=as.numeric(as.character(df2$Frequency))
df_final<- df %>%
full_join(df2, by = "Modifications", suffix = c(".1", ".2")) %>%
# Fix data to convert to character and numeric
mutate_each(funs(as.numeric(as.character(.))), starts_with("pept")) %>%
# See difference
mutate(change = Frequency.2 - Frequency.1)
#How many new peptides are there  in the new release?.
df_peptides <- df_final[is.na(df_final$Frequency.1),]
df_peptides2 <- data.frame(Modifications=df_peptides$Modifications, Frequency=df_peptides$Frequency.2)
df_peptides3 <- df_final[is.na(df_final$Frequency.2),]
df_peptides4 <- data.frame(Modifications=df_peptides3$Modifications, Frequency=df_peptides3$Frequency.2)
#To know if the new release has obtained new peptides.
if (nrow(df_final[is.na(df_final$Frequency.1),])!=0) {
cat("The new release has obtained new peptides")
kable(df_peptides2, padding = 0)
} else if (nrow(df_final[is.na(df_final$Frequency.2),])!=0) {
cat("The new release has lost peptides\n")
kable(df_peptides4, padding = 0)
} else
cat("The new release has got the same peptides")
#HISTOGRAM:
#Para preparar el histograma tenemos que clasificar los tipos de modificaciones, POSICION-DATABA-ID.
# Para ello cogemos los datos que no sean NULL y eliminamos los espacios en banco.
histo1 = subset(df, Modifications != 'NULL')
histo1[histo1==""] <- NA
histo1 = subset(histo1, Modifications != 'NA')
histo1_2 = subset(df2, Modifications != 'NULL')
histo1_2[histo1_2==""] <- NA
histo1_2 = subset(histo1_2, Modifications != 'NA')
#Split dataset.
histo2 <- data.frame(str_split_fixed(histo1$Modifications, ",", 20))
histo2_2 <- data.frame(str_split_fixed(histo1_2$Modifications, ",", 20))
#If you want to check how many columns are empty, you can use the code below:
#columns_emply <- histo2[!sapply(histo2, function(x) all(x == ""))]
#columns_emply <- histo2_2[!sapply(histo2_2, function(x) all(x == ""))]
#Merge the columns in one.
histo3 <- melt(setDT(histo2),                              # set df to a data.table
measure.vars = list(c(1:20)),    # set column groupings
value.name = 'V1')[                      # set output name scheme
, -1, with = F]
histo3_2 <- melt(setDT(histo2_2),                              # set df to a data.table
measure.vars = list(c(1:20)),    # set column groupings
value.name = 'V1')[                      # set output name scheme
, -1, with = F]
#Remove white rows.
histo3[histo3==""] <- NA
histo3 = subset(histo3, V1 != " ")
histo3_2[histo3_2==""] <- NA
histo3_2 = subset(histo3_2, V1 != " ")
#Remove first part of the string [num]-
histo4 <- data.frame(modifications=gsub(" [A-Za-z] ", "", gsub("[0-9]*-", "", histo3$V1)))
histo4_2 <- data.frame(modifications.2=gsub(" [A-Za-z] ", "", gsub("[0-9]*-", "", histo3_2$V1)))
#Histograma:
histo5 <- data.frame(table(histo4))
histo5_2 <- data.frame(table(histo4_2))
# ggplot(data=histo5, aes(x=histo4, y=Freq, fill=histo4)) +
#     geom_bar(stat="identity") + guides(fill=FALSE)+
#     theme(axis.text.x = element_text(angle = 90, hjust = 1))
#
# ggplot(data=histo5_2, aes(x=histo4_2, y=Freq, fill=histo4_2)) +
#     geom_bar(stat="identity") + guides(fill=FALSE)+
#     theme(axis.text.x = element_text(angle = 90, hjust = 1))
#We're going to compare different releases in order to compare between them and create a stacker plot.
histo5 <- modifications_current_release
histo5_2 <- modifications_previous_release
colnames(histo5) <- c("Modifications","Frequency")
colnames(histo5_2) <- c("Modifications","Frequency")
histo6<-merge(histo5,histo5_2, by = "Modifications",all = T)
histo7<- melt(histo6)
histo7$variable<-factor(histo7$variable,labels = c("Modifications1","Modifications2"))
ggplot(histo7, aes(x = Modifications, y = value, fill = variable)) +
geom_bar(stat = "identity",position = "dodge")+
theme(axis.text.x = element_text(angle = 20, hjust = 0.5, vjust = -0.1)) +
guides(fill=FALSE)+
labs("Barplot current_release vs Previous Release") +
xlab("Values")+
ylab("Frequency")+
theme(text = element_text(size=18), axis.text.x = element_text(angle = 90, hjust = 1, size = 15),
axis.text.y=element_text(size = 15))
#Here is the same than before examples.
spectrum_iden_current_release <- read.delim(paste(current_release_iden, "tables_spectrum_ide_table.txt", sep=""), header = TRUE)
spectrum_iden_previous_release <- read.delim(paste(previous_release, "tables_spectrum_ide_table.txt", sep = ""), header = TRUE)
cat("The number of identified spectrum in the Current Release is:", spectrum_iden_current_release$Spectrum.Number)
cat("The number of identified spectrum in the previous_release  is:", spectrum_iden_previous_release$Spectrum.Number)
cat("The number of identified spectrum in the Current Release  is: ", spectrum_iden_current_release$Spectrum.Number)
cat("The number of identified spectrum in the Previous Release is: ", spectrum_iden_previous_release$Spectrum.Number)
#for identified
if (spectrum_iden_current_release$Spectrum.Number>spectrum_iden_previous_release$Spectrum.Number) {
cat("Number of identified spectrum reduced:", spectrum_iden_current_release$Spectrum.Number-spectrum_iden_previous_release$Spectrum.Number,"\n")
} else if ((spectrum_iden_current_release$Spectrum.Number<spectrum_iden_previous_release$Spectrum.Number)) {
cat("Number of identified spectrum Peptides increased:", spectrum_iden_previous_release$Spectrum.Number-spectrum_iden_current_release$Spectrum.Number,"\n")
} else
cat("The number of identified spectrum is the same in both releases \n")
#For unidentified
#if (spectrum_unid_current_release$Spectrum.Number>spectrum_unid_previous_release$Spectrum.Number) {
#    cat("Number of unidentified spectrum reduced:", spectrum_unid_current_release$Spectrum.Number-spectrum_unid_previous_release$Spectrum.Number,"\n")
#} else if ((spectrum_unid_current_release$Spectrum.Number<spectrum_unid_previous_release$Spectrum.Number)) {
#    cat("Number of unidentified spectrum Peptides increased:", spectrum_unid_previous_release$Spectrum.Number-spectrum_unid_current_release$Spectrum.Number,"\n")
#} else
#    cat("The number of unidentified spectrum is the same in both releases \n")
taxonomy_iden_current_release <- read.delim(paste(current_release_iden, "tables_taxonomy_ide_table.txt", sep = ""), header = FALSE)
taxonomy_iden_previous_release <- read.delim(paste(previous_release, "tables_taxonomy_ide_table.txt", sep = ""), header = FALSE)
colnames(taxonomy_iden_current_release) <- c("Taxonomy", "Frequency")
colnames(taxonomy_iden_previous_release) <- c("Taxonomy", "Frequency")
cat("Number of species in the Current Release is:", nrow(taxonomy_iden_current_release))
cat("The total taxonomy for identified peptides in the Current Release is:", sum(taxonomy_iden_current_release$Frequency))
cat("Number of species in the Previous Release is:", nrow(taxonomy_iden_previous_release))
cat("The total taxonomy for identified peptides in the Previous Release is:", sum(taxonomy_iden_previous_release$Frequency))
#Conditional
if (sum(taxonomy_iden_current_release$Frequency)>sum(taxonomy_iden_previous_release$Frequency)) {
cat("Identified peptides from Taxonomy reduced in the new release:", nrow(taxonomy_iden_current_release$Frequency)-nrow(taxonomy_iden_previous_release$Frequency),"\n")
} else if ((sum(taxonomy_iden_current_release$Frequency)<sum(taxonomy_iden_previous_release$Frequency))) {
cat("Identified peptides from Taxonomy increased in the new release:", sum(taxonomy_iden_previous_release$Frequency)-sum(taxonomy_iden_current_release$Frequency),"\n")
} else
cat("Taxonomy peptides are equal in both releases \n")
#Conditional
#if (sum(taxonomy_unid_current_release$Frequency)>sum(taxonomy_unid_previous_release$Frequency)) {
#    cat("Identified peptides from Taxonomy reduced in the new release:", nrow(taxonomy_unid_current_release$Frequency)-nrow(taxonomy_unid_previous_release$Frequency),"\n")
#} else if ((sum(taxonomy_unid_current_release$Frequency)<sum(taxonomy_unid_previous_release$Frequency))) {
#    cat("Identified peptides from Taxonomy increased in the new release:", sum(taxonomy_unid_previous_release$Frequency)-sum(taxonomy_unid_current_release$Frequency),"\n")
#} else
#    cat("Taxonomy peptides are equal in both releases \n")
taxonomy_iden_current_release <- read.delim(paste(current_release_iden, "tables_taxonomy_ide_table.txt", sep = ""), header = FALSE)
taxonomy_iden_previous_release <- read.delim(paste(previous_release, "tables_taxonomy_ide_table.txt", sep = ""), header = FALSE)
colnames(taxonomy_iden_current_release) <- c("Taxonomy", "Frequency")
colnames(taxonomy_iden_previous_release) <- c("Taxonomy", "Frequency")
taxonomy_iden_current_release$Taxonomy <- as.factor(taxonomy_iden_current_release$Taxonomy)
taxonomy_iden_previous_release$Taxonomy <- as.factor(taxonomy_iden_previous_release$Taxonomy)
#Create table
taxonomy_table_iden<-merge(taxonomy_iden_current_release,taxonomy_iden_previous_release, by = "Taxonomy",all = T)
library(reshape2)
taxonomy_table_iden2<- melt(taxonomy_table_iden)
taxonomy_table_iden2$variable<-factor(taxonomy_table_iden2$variable,labels = c("Taxonomy1","Taxonomy2"))
ggplot(taxonomy_table_iden2, aes(x = Taxonomy, y = value, fill = variable)) +
geom_bar(stat = "identity",position = "dodge")+
theme(axis.text.x = element_text(angle = 20, hjust = 0.5, vjust = -0.1)) +
guides(fill=FALSE)+
labs("Barplot current_release vs Previous Release") +
xlab("Values")+
ggtitle("Identified Taxonomy")+
ylab("Frequency")+
theme(text = element_text(size=18), axis.text.x = element_text(angle = 90, hjust = 1, size = 15),
axis.text.y=element_text(size = 15))
#ggplot(taxonomy_table_unid2, aes(x = Taxonomy, y = value, fill = variable)) +
#  geom_bar(stat = "identity",position = "dodge")+
#    theme(axis.text.x = element_text(angle = 20, hjust = 0.5, vjust = -0.1)) +
#    guides(fill=FALSE)+
#    labs("Barplot current_release vs Previous Release") +
#    ggtitle("Unidentified Taxonomy")+
#    xlab("Values")+
#    ylab("Frequency")+
#    theme(text = element_text(size=18), axis.text.x = element_text(angle = 90, hjust = 1, size = 15),
#          axis.text.y=element_text(size = 15))
install.packages("Rserve")
install.packages("Cairo")
library(PepBed)
library(circlize)
install.packages("circlize", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(circlize)
circos.initializeWithIdeogram()
bed = generateRandomBed(nr = 200, nc = 4)
View(bed)
library(circlize)
circos.initializeWithIdeogram()
bed = generateRandomBed(nr = 200, nc = 4)
circos.genomicPosTransformLines(bed, posTransform = posTransform.default, horizontalLine = "top")
om = circos.par("track.margin")
oc = circos.par("cell.padding")
circos.par(track.margin = c(om[1], 0), cell.padding = c(0, 0, 0, 0))
f = colorRamp2(breaks = c(-1, 0, 1), colors = c("blue", "white", "red"))
circos.genomicTrackPlotRegion(bed, stack = TRUE, panel.fun = function(region, value, ...) {
circos.genomicRect(region, value, col = f(value[[1]]),
border = f(value[[1]]), lwd = 0.1, posTransform = posTransform.default, ...)
}, bg.border = NA, track.height = 0.1)
circos.par(track.margin = om, cell.padding = oc)
bed = generateRandomBed(nr = 500, fun = function(k) runif(k)*sample(c(-1, 1), k, replace = TRUE))
circos.genomicTrackPlotRegion(bed, ylim = c(-1, 1), panel.fun = function(region, value, ...) {
col = ifelse(value[[1]] > 0, "red", "green")
circos.genomicPoints(region, value, col = col, cex = 0.5, pch = 16)
cell.xlim = get.cell.meta.data("cell.xlim")
for(h in c(-1, -0.5, 0, 0.5, 1)) {
circos.lines(cell.xlim, c(h, h), col = "#00000040")
}
}, track.height = 0.1)
bed = generateRandomBed(nr = 500, fun = function(k) rnorm(k, 0, 50))
circos.genomicTrackPlotRegion(bed, panel.fun = function(region, value, ...) {
x = (region[[2]] + region[[1]]) / 2
y = value[[1]]
loess.fit = loess(y ~ x)
loess.predict = predict(loess.fit, x, se = TRUE)
d1 = c(x, rev(x))
d2 = c(loess.predict$fit + loess.predict$se.fit, rev(loess.predict$fit - loess.predict$se.fit))
circos.polygon(d1, d2, col = "#CCCCCC", border = NA)
circos.points(x, y, pch = 16, cex = 0.5)
circos.lines(x, loess.predict$fit)
}, track.height = 0.1)
bed_list = list(generateRandomBed(nr = 500, fun = function(k) runif(k)),
generateRandomBed(nr = 500, fun = function(k) runif(k)))
col = c("#FF000040", "#0000FF40")
circos.genomicTrackPlotRegion(bed_list, ylim = c(-1, 1), panel.fun = function(region, value, ...) {
i = getI(...)
if(i == 1) {
circos.genomicLines(region, value, area = TRUE, baseline = 0, col = "orange", border = NA, ...)
} else {
circos.genomicLines(region, -value, area = TRUE, baseline = 0, col = "yellow", border = NA, ...)
}
}, track.height = 0.1)
region1 = generateRandomBed(nr = 1000); region1 = region1[sample(nrow(region1), 20), ]
region2 = generateRandomBed(nr = 1000); region2 = region2[sample(nrow(region2), 20), ]
circos.genomicLink(region1, region2, col = sample(10, 20, replace = TRUE))
highlight.chromosome("chr1")
circos.clear()
install.packages("RODBC")
install.packages("scico")
setwd("~/IdeaProjects/github-repo/ypriverol/compomics-paper/source/citations")
library(dplyr)
library(tidyr)
library(ggplot2)
library(scico)
library(ggrepel)
citationDF <- read.table("../../data/web-sciences-metrics.txt", sep = "\t", stringsAsFactors = F, header = T)
citationDF <- citationDF %>%
rename(Name = X) %>%
mutate(
Sum2Y = X2017 + X2018,
rank = rank(-Sum),
rank2Y = rank(-Sum2Y, ties.method = "min"),
delta = rank - rank2Y
) %>%
select(Name, Sum, rank, Sum2Y, rank2Y, delta) %>%
arrange(rank2Y) %>%
mutate(
rankName = paste(rank2Y, Name, sep = "- "),
rankNameOrdered = factor(rankName, levels = rev(rankName))
)
citationDF <- read.table("../../data/web-sciences-metrics.txt", sep = ",", stringsAsFactors = F, header = T)
citationDF <- read.table("../../data/web-sciences-metrics.txt", sep = ",", stringsAsFactors = F, header = T)
citationDF <- read.table("../../data/web-sciences-metrics.txt", sep = ",", stringsAsFactors = F, header = T)
citationDF <- citationDF %>%
rename(Name = X) %>%
mutate(
Sum2Y = X2017 + X2018,
rank = rank(-Sum),
rank2Y = rank(-Sum2Y, ties.method = "min"),
delta = rank - rank2Y
) %>%
select(Name, Sum, rank, Sum2Y, rank2Y, delta) %>%
arrange(rank2Y) %>%
mutate(
rankName = paste(rank2Y, Name, sep = "- "),
rankNameOrdered = factor(rankName, levels = rev(rankName))
)
View(citationDF)
citationDF <- citationDF %>% rename(Name = X) %>% mutate(Sum2Y = X2017 + X2018,rank = rank(-Sum),rank2Y = rank(-Sum2Y, ties.method = "min"),delta = rank - rank2Y) %>% select(Name, Sum, rank, Sum2Y, rank2Y, delta) %>% arrange(rank2Y) %>% mutate( rankName = paste(rank2Y, Name, sep = "- "), rankNameOrdered = factor(rankName, levels = rev(rankName)))
source('~/IdeaProjects/github-repo/ypriverol/compomics-paper/source/citations/cumulative_citation_figure.R', echo=TRUE)
source('~/IdeaProjects/github-repo/ypriverol/compomics-paper/source/citations/cumulative_citation_figure.R', echo=TRUE)
source('~/IdeaProjects/github-repo/ypriverol/compomics-paper/source/citations/rank_figure.R', echo=TRUE)
View(citationDF)
citationDF <- citationDF %>% rename(Title = X) %>%
mutate(
Sum2Y = X2017 + X2019,
rank = rank(-Sum),
rank2Y = rank(-Sum2Y, ties.method = "min"),
delta = rank - rank2Y
) %>%
select(Name, Sum, rank, Sum2Y, rank2Y, delta) %>%
arrange(rank2Y) %>%
mutate(
rankName = paste(rank2Y, Name, sep = "- "),
rankNameOrdered = factor(rankName, levels = rev(rankName))
)
citationDF <- citationDF %>% rename(Name = Title) %>%
mutate(
Sum2Y = X2017 + X2019,
rank = rank(-Sum),
rank2Y = rank(-Sum2Y, ties.method = "min"),
delta = rank - rank2Y
) %>%
select(Name, Sum, rank, Sum2Y, rank2Y, delta) %>%
arrange(rank2Y) %>%
mutate(
rankName = paste(rank2Y, Name, sep = "- "),
rankNameOrdered = factor(rankName, levels = rev(rankName))
)
citationDF <- citationDF %>% rename(Name = Title) %>%
mutate(
Sum2Y = X2017 + X2019,
rank = rank(-Sum),
rank2Y = rank(-Sum2Y, ties.method = "min"),
delta = rank - rank2Y
) %>%
select(Name, Total.Citations, rank, Sum2Y, rank2Y, delta) %>%
arrange(rank2Y) %>%
mutate(
rankName = paste(rank2Y, Name, sep = "- "),
rankNameOrdered = factor(rankName, levels = rev(rankName))
)
citationDF <- citationDF %>% rename(Name = Title) %>%
mutate(
Sum2Y = X2017 + X2019,
rank = rank(-Sum),
rank2Y = rank(-Sum2Y, ties.method = "min"),
delta = rank - rank2Y
) %>%
select(Name, Total.Citations, rank, Sum2Y, rank2Y, delta) %>%
arrange(rank2Y) %>%
mutate(
rankName = paste(rank2Y, Name, sep = "- "),
rankNameOrdered = factor(rankName, levels = rev(rankName))
)
citationDF <- citationDF %>% rename(Name = Title) %>%
mutate(
Sum2Y = X2017 + X2019,
rank = rank(-Total.Citations),
rank2Y = rank(-Sum2Y, ties.method = "min"),
delta = rank - rank2Y
) %>%
select(Name, Total.Citations, rank, Sum2Y, rank2Y, delta) %>%
arrange(rank2Y) %>%
mutate(
rankName = paste(rank2Y, Name, sep = "- "),
rankNameOrdered = factor(rankName, levels = rev(rankName))
)
scatterPlot <- ggplot() + theme_bw(base_size = 18) +
geom_abline(slope = 1, intercept = 0, col = "grey80", linetype = "dashed") +
geom_point(data = citationDF, mapping = aes(x = rank, y = rank2Y)) +
scale_x_reverse(name = "Rank [1995-2019]", expand = c(0, 0), limits = c(nrow(citationDF) + 5, 0)) +
scale_y_reverse(name = "Rank [2017-2019]", expand = c(0, 0), limits = c(nrow(citationDF) + 5, 0))
png("../citations_rank.png", width = 1600, height = 900)
plot(scatterPlot)
dummy <- dev.off()
maxDelta <- max(citationDF$delta)
minDelta <- min(citationDF$delta)
absDelta <- max(abs(minDelta), maxDelta)
totalLength <- 2 * absDelta
barPlot <- ggplot() + theme_bw(base_size = 18) +
geom_col(data = citationDF, mapping = aes(x = rankNameOrdered, y = delta, fill = delta), col = "black") +
scale_fill_scico(palette = "cork", begin = (-absDelta - minDelta) / totalLength, end = 1- (absDelta - maxDelta) / totalLength) +
coord_flip() +
scale_y_continuous(name = "Rank Gain") +
theme(axis.title.y = element_blank())
png("../citations_rank_delta.png", width = 450, height = 800)
plot(barPlot)
dummy <- dev.off()
source('~/IdeaProjects/github-repo/ypriverol/compomics-paper/source/citations/rank_figure.R', echo=TRUE)
source('~/IdeaProjects/github-repo/ypriverol/compomics-paper/source/citations/rank_figure.R', echo=TRUE)
citationDF <- citationDF %>% rename(Name = Name) %>%
mutate(
Sum2Y = X2017 + X2018,
rank = rank(-Sum),
rank2Y = rank(-Sum2Y, ties.method = "min"),
delta = rank - rank2Y
) %>%
select(Name, Sum, rank, Sum2Y, rank2Y, delta) %>%
arrange(rank2Y) %>%
mutate(
rankName = paste(rank2Y, Name, sep = "- "),
rankNameOrdered = factor(rankName, levels = rev(rankName))
)
source('~/IdeaProjects/github-repo/ypriverol/compomics-paper/source/citations/rank_figure.R', echo=TRUE)
View(citationDF)
source('~/IdeaProjects/github-repo/ypriverol/compomics-paper/source/citations/rank_figure.R', echo=TRUE)
source('~/IdeaProjects/github-repo/ypriverol/compomics-paper/source/citations/cumulative_citation_figure.R', echo=TRUE)
citationDF <- read.table("../../data/web-sciences-metrics.txt", sep = ",", stringsAsFactors = F, header = T)
citationDF <- citationDF %>%
rename(Name = Name) %>%
gather(key = "Year", value = "N", paste0("X", 1995:2018)) %>%
mutate("Year" = as.numeric(substring(Year, 2))) %>%
replace_na(list(N = 0))
top10Lim <- sort(unique(citationDF$Total.Citations), decreasing = T)[10]
top10DF <- citationDF %>% filter(Sum >= top10Lim)
top10DF <- citationDF %>% filter(Total.Citations >= top10Lim)
bottomDF <- citationDF %>% filter(Sum < top10Lim)
top10Lim <- sort(unique(citationDF$Total.Citations), decreasing = T)[10]
top10DF <- citationDF %>% filter(Total.Citations >= top10Lim)
bottomDF <- citationDF %>% filter(Total.Citations < top10Lim)
otherDF <- bottomDF %>%
group_by(Year) %>%
summarise(
Name = "Other",
PMID = paste(PMID, collapse = ", "),
Sum = sum(Sum),
Review = 11,
Update = 11,
Diff = 0,
N = sum(N)
)
otherDF <- bottomDF %>%
group_by(Year) %>%
summarise(
Name = "Other",
PMID = paste(Name, collapse = ", "),
Sum = sum(Sum),
Review = 11,
Update = 11,
Diff = 0,
N = sum(N)
)
otherDF <- bottomDF %>%
group_by(Year) %>%
summarise(
Name = "Other",
PMID = paste(Name, collapse = ", "),
Sum = sum(Total.Citations),
Review = 11,
Update = 11,
Diff = 0,
N = sum(N)
)
plotDF <- rbind(top10DF, otherDF)
source('~/IdeaProjects/github-repo/ypriverol/compomics-paper/source/citations/cumulative_citation_figure.R', echo=TRUE)
View(top10DF)
